import org.gradle.internal.os.OperatingSystem

configurations {
    liquibase
}

dependencies {
    liquibase "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
}

if (OperatingSystem.current().isWindows()) {
    task pathingLiquibaseJar(type: Jar) {
        dependsOn configurations.liquibase
        appendix = 'pathingLiquibase'

        doFirst {
            manifest {
                attributes 'Class-Path':
                    sourceSets.main.runtimeClasspath.plus(configurations.liquibase)
                    .collect {
                        it.toURL().toString().replaceFirst(/file:\/+/, '/')
                    }.join(' ')
            }
        }
    }
}

task liquibaseDiffChangelog(dependsOn: compileJava, type: JavaExec) {
	group = "liquibase"

	if (OperatingSystem.current().isWindows()) {
		dependsOn pathingLiquibaseJar
		doFirst {
			classpath = files(pathingLiquibaseJar.archivePath)
		}
	} else {
		classpath sourceSets.main.runtimeClasspath
		classpath configurations.liquibase
	}
	main = "liquibase.integration.commandline.Main"

	args "--changeLogFile=src/main/resources/config/liquibase/data/local/changelog/" + buildTimestamp() +"_changelog.xml"
	args "--referenceUrl=hibernate:spring:org.openlearn.domain?dialect=org.hibernate.dialect.H2Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
	args "--username=openlearn"
	args "--password="
	args "--url=jdbc:h2:file:./target/h2db/db/openlearn"
	args "--driver=org.h2.Driver"
	args "diffChangeLog"
	args "--excludeObjects=oauth_access_token, oauth_approvals, oauth_client_details, oauth_client_token, oauth_code, oauth_refresh_token"
}

task liquibaseCreateChangelog(dependsOn: compileJava, type: JavaExec) {
	group = "liquibase"

	if (OperatingSystem.current().isWindows()) {
		dependsOn pathingLiquibaseJar
		doFirst {
			classpath = files(pathingLiquibaseJar.archivePath)
		}
	} else {
		classpath sourceSets.main.runtimeClasspath
		classpath configurations.liquibase
	}

	def env

	if(project.hasProperty('prod')){
		env='prod'
	}else{
		env='dev'
	}

	main = "liquibase.integration.commandline.Main"

	args "--defaultsFile=src/main/local-props/liquibase-$env.properties"
	args "--changeLogFile=src/main/resources/config/liquibase/changelog" + buildTimestamp() +"_changelog.xml"
	args "--referenceUrl=hibernate:spring:org.openlearn.domain?dialect=org.hibernate.dialect.H2Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
	args "diffChangeLog"
	args "--excludeObjects=oauth_access_token, oauth_approvals, oauth_client_details, oauth_client_token, oauth_code, oauth_refresh_token"
}

task liquibaseApplyChangelog(dependsOn: compileJava, type: JavaExec) {
	group = "liquibase"

	if (OperatingSystem.current().isWindows()) {
		dependsOn pathingLiquibaseJar
		doFirst {
			classpath = files(pathingLiquibaseJar.archivePath)
		}
	} else {
		classpath sourceSets.main.runtimeClasspath
		classpath configurations.liquibase
	}

	def env
	if(project.hasProperty('prod')){
		env='prod'
	}else{
		env='dev'
	}

	main = "liquibase.integration.commandline.Main"

	args "--defaultsFile=local-props/liquibase-"+env+".properties"
	args "--changeLogFile=src/main/resources/config/liquibase/master-server.xml"
	args "--referenceUrl=hibernate:spring:org.openlearn.domain?dialect=org.hibernate.dialect.H2Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
	args "update"
}

task liquibaseLoadSampleData(dependsOn: compileJava, type: JavaExec) {
	group = "liquibase"

	if (OperatingSystem.current().isWindows()) {
		dependsOn pathingLiquibaseJar
		doFirst {
			classpath = files(pathingLiquibaseJar.archivePath)
		}
	} else {
		classpath sourceSets.main.runtimeClasspath
		classpath configurations.liquibase
	}

	def env
	if(project.hasProperty('prod')){
		env='prod'
	}else{
		env='dev'
	}

	main = "liquibase.integration.commandline.Main"

	args "--defaultsFile=local-props/liquibase-"+env+".properties"
	args "--changeLogFile=src/main/resources/config/liquibase/load-sample-data.xml"
	args "--referenceUrl=hibernate:spring:org.openlearn.domain?dialect=org.hibernate.dialect.H2Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
	args "update"
}

def buildTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
